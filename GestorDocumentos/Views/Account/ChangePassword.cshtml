@model GestorDocumentos.Models.ChangePasswordViewModel

@using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Cambio de Contraseña</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)
    @Html.Editor("Usuario", new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.LUsuario, @hidden = "hidden" } })
    <div class="form-group">
        <label class="col-md-2 control-label">Email</label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OldPassword, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OldPassword, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OldPassword, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="Cambiar" value="Cambiar" class="btn btn-success" />
        </div>
    </div>
    
</div>
}

<div>
    @Html.ActionLink("Página Anterior", "Delete")
</div>

@section Scripts
{
    <script type="text/javascript">

        $(Document).ready(function () {
        $("#Email").attr({ 'disabled': true });

            var nombre = $("#Usuario").val();

         $.getJSON('/Account/GetUserIdCPW', { email: nombre }, function (data) {
          $.each(data, function () {
             var userid = this.Value;
              $("#id").val(userid);
           });
         });

            var id = $("#id").val();
            $.getJSON('/Account/GetUserIdCPW2', { id: id }, function (data) {
                $.each(data, function () {
                    var nusuario = this.Text;
                    $("#Email").val(nusuario);
                });
            });

        });

        //Validación de escritura:

        $('#OldPassword').bind('keypress', function (event) {
            var regex = new RegExp("^[A-Za-z0-9\#$%&/()=_^*¡!'.+-¿?,]*$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
        });

        $('#NewPassword').bind('keypress', function (event) {
            var regex = new RegExp("^[A-Za-z0-9\#$%&/()=_^*¡!'.+-¿?,]*$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
        });

        $('#ConfirmPassword').bind('keypress', function (event) {
            var regex = new RegExp("^[A-Za-z0-9\#$%&/()=_^*¡!'.+-¿?,]*$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
        });

    </script>

    }