@model GestorDocumentos.Models.Documento_Detalle

@{
    ViewBag.Title = "Busqueda de Documentos por filtros";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Index", "ListarBusqueda", null, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3>Seleccione los filtros a buscar</h3>
        <hr />
        <input type="hidden" id="Rol" name="Rol" value="@ViewBag.Rol">

        @Html.EditorFor(model => model.llaveUnica, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })

        <div class="form-group">
            @Html.LabelFor(model => model.AreaId, "Área", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AreaId, new SelectList(ViewBag.AreaId, "value", "Text"), new { @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CarpetaEncabezadoid, "Carpeta", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CarpetaEncabezadoid", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CarpetaEncabezadoid, "", new { @class = "text-danger" })
            </div>
        </div>
        <div id="dynamicfields">

        </div>

        @Html.EditorFor(model => model.Nombre_Ori, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
        @Html.EditorFor(model => model.Nombre_Des, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })
        @Html.EditorFor(model => model.Imagen, new { htmlAttributes = new { @class = "form-control", @type = "hidden" } })

        <table>
            <tr>
                <td>
                    Documento a Buscar:
                </td>
                <td></td>
            </tr>
            <tr>
                <td>
                    <input type="text" id="Nombre" name="Nombre" class="form-control" oninput="InputToUpper(this);"> <br />
                </td>

                <td>
                    <input type="submit" value="Buscar" class="btn btn-info" />
                </td>
            </tr>
        </table>

    </div>
}



@using (Html.BeginForm("GenerarReporte", "Documento_Detalle", null, FormMethod.Post))
{
    <div>
        <input type="text" id="Area" name="Area" class="form-control" hidden>
    </div>
    <div>
        <input type="text" id="Encabezadoid" name="Encabezadoid" class="form-control" hidden>
    </div>
    <div>
        <input type="text" id="ValPrint" name="ValPrint" class="form-control" hidden>
    </div>
    <div>
        <input type="submit" id="btnPrint" value="Imprimir Reporte" class="btn btn-success" hidden />
        <input type="button" id="btnPrint2" value="Imprimir Reporte" class="btn btn-success" onclick="return Confirmar1();" />
    </div>
}

@if (ViewBag.Message != null)
{
    <script type="text/javascript">
         alert("@ViewBag.Message");
    </script>
}

<script src="@Url.Content("~/Scripts/jquery-3.4.1.min.js")"></script>

<script type="text/javascript">

    /*(function ($) {
    })(jQuery)*/
    window.onload = () => {
        let CarpetaEncabezadoid = document.querySelector('#CarpetaEncabezadoid');
        getcarpetas();
        //console.log('sdfsdf: ' + document.querySelector('#CarpetaEncabezadoid').options.length);
        //console.log(document.querySelector('#CarpetaEncabezadoid'));

        $("#AreaId").click(getcarpetas);

        function getcarpetas() {
            let list = '';
            $.getJSON('/VisualizacionConFiltros/GetAreayEncabezadoCarpetaId', { idarea: $('#AreaId').val() }, function (data) {
                $.each(data, function () {
                    list += `<option value="${this.Value}">${this.Text}</option>`;
                });
                //Agregado el 30 de Dic 2020
                var Area = document.querySelector('#AreaId').value;
                $("#Area").val(Area);
                //
                //console.log(data);
                $('#CarpetaEncabezadoid').html(list);
                //console.log(document.querySelector('#CarpetaEncabezadoid').options.length);
                if (document.querySelector('#CarpetaEncabezadoid').options.length > 0) {
                    setField();
                } else {
                    document.querySelector('#dynamicfields').innerHTML = '';
                }
            });
        }


        CarpetaEncabezadoid.addEventListener('change', setField);


        async function setField() {
            //console.log('inicio');
            document.querySelector('#dynamicfields').innerHTML = '';
            //console.log(CarpetaEncabezadoid.value);

            //Cambio Agregado el 30 de Diciembre de 2020
            document.querySelector('#Encabezadoid').value = CarpetaEncabezadoid.value;
            //******************************************
            let json = await fileds(CarpetaEncabezadoid.value);
            let selects = JSON.parse(json.selects);
            //console.log(json);

            let options = JSON.parse(json.options);
            //console.log(options);
            console.log(selects)
            for (let i = 0; i < selects.length; i++) {
                let div = document.createElement('div');
                let label = document.createElement('label');
                label.innerText = selects[i].Descripcion;
                label.setAttribute('class', 'control-label');
                label.setAttribute('for', `dynamicselect${selects[i].Descripcion}`)
                div.setAttribute('class', 'form-group');
                let select = document.createElement('SELECT');
                select.setAttribute('id', `dynamicselect${selects[i].Descripcion}`);
                select.setAttribute('class', 'form-control');
                //select.setAttribute('required', true);

                let defaultoption = document.createElement('option');
                defaultoption.setAttribute('value', '');
                defaultoption.setAttribute('selected', true);
                defaultoption.setAttribute('disabled', true);
                defaultoption.innerText = `Seleccionar ${selects[i].Descripcion}`;
                select.appendChild(defaultoption);
                div.appendChild(label);
                div.appendChild(select);
                document.querySelector('#dynamicfields').appendChild(div);
                for (var x = 0; x < options.length; x++) {
                    if (options[x].ConfCarpetaDetalleId === selects[i].ConfCarpetaDetalleId) {
                        let option = document.createElement('option');
                        option.setAttribute('value', options[x].Descripcion);
                        option.innerText = options[x].Descripcion;
                        select.appendChild(option);
                    }
                }
                select.addEventListener('change', setllaveunica);
            }
            let fecha = JSON.parse(json.fecha);
            //console.table(fecha);
            if (fecha != '' && fecha != undefined && fecha != null && fecha.Tipo != 0) {

                let div = document.createElement('div');
                let label = document.createElement('label');
                div.setAttribute('class', 'form-group');
                label.setAttribute('class', 'control-label');
                label.setAttribute('for', 'dateInput');
                label.innerText = fecha.Descripcion;
                let input = document.createElement('input');
                input.setAttribute('type', 'date');
                input.setAttribute('class', 'datepicker');
                input.setAttribute('name', 'dateInput');
                input.setAttribute('id', 'dateInput');
                input.setAttribute('required', true);
                input.setAttribute('onblur', 'return myFunction();');
                input.setAttribute('onkeydown', 'return false');
                div.appendChild(label);
                div.appendChild(input);
                document.querySelector('#dynamicfields').appendChild(div);
                //fchtoday();
                input.addEventListener('change', setllaveunica);
            }
        }

        function setllaveunica() {
            let selects = document.querySelectorAll('#dynamicfields select');
            let fecha = document.querySelector('#dateInput');
            //console.log(fecha);
            let llaveunica = '';
            for (let i = 0; i < selects.length; i++) {
                if (selects[i].value != '') {
                    llaveunica += selects[i].value + '-';
                }

            }
            console.log(llaveunica);
            llaveunica = llaveunica.slice(0, -1);
            let slowdate = '';
            //fechas****************************************
            if (fecha != null && fecha.value != '') {
                //console.log('fecha.value=> '+fecha.value);
                slowdate = fecha.value.split("-");
                //console.log(slowdate);
                llaveunica = llaveunica + '-' + slowdate[0] + slowdate[1] + slowdate[2];
            }

            //**********************************************
            //console.log(llaveunica);
            document.querySelector('#llaveUnica').value = llaveunica;
            document.querySelector('#Nombre').value = llaveunica;
            document.querySelector('#ValPrint').value = llaveunica;
        }

        //async function fileds(id) {
        //    const settings = {
        //        method: 'POST',
        //        headers: {
        //            Accept: 'application/json',
        //            'Content-Type': 'application/json'
        //        }
        //    };
        //    let request = await fetch(`/VisualizacionConFiltros/fields/${id}`, settings);
        //    let response = await request.json();
        //    return response;
        //}

        async function fileds(id) {
            try {
                var data = {
                    id: id
                };

                const settings = {
                    method: 'POST',
                    body: JSON.stringify(data), // Enviar los datos en formato JSON
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json'
                    }
                };
                let request = await fetch('/VisualizacionConFiltros/fields', settings);
                if (request.ok) {
                    let response = await request.json();
                    return response;
                } else {
                    throw new Error('La solicitud HTTP no fue exitosa');
                }
            } catch (error) {
                alert(error);
                throw new Error('Ocurrió un error al analizar la respuesta JSON');
            }
        }
    }

    async function fchtoday() {
        let d = new Date();
        d.setMinutes(d.getMinutes() - d.getTimezoneOffset());
        d = d.toJSON().slice(0, 10);
        console.log(d);
        //document.querySelector('#dateInput').value = d;
    }
</script>

@section Scripts
{
    <script type="text/javascript">
        $('th').click(function () {
            var table = $(this).parents('table').eq(0)
            var rows = table.find('tr:gt(0)').toArray().sort(comparer($(this).index()))
            this.asc = !this.asc
            if (!this.asc) {
                rows = rows.reverse()
            }
            for (var i = 0; i < rows.length; i++) {
                table.append(rows[i])
            }
            setIcon($(this), this.asc);
        })

        function comparer(index) {
            return function (a, b) {
                var valA = getCellValue(a, index),
                    valB = getCellValue(b, index)
                return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.localeCompare(valB)
            }
        }

        function getCellValue(row, index) {
            return $(row).children('td').eq(index).html()
        }

        function setIcon(element, asc) {
            $("th").each(function (index) {
                $(this).removeClass("sorting");
                $(this).removeClass("asc");
                $(this).removeClass("desc");
            });
            element.addClass("sorting");
            if (asc) element.addClass("asc");
            else element.addClass("desc");
        }

        $("#Document").ready(function () {
            var rol = $("#Rol").val();
            var valor = rol;

            if (valor == "JEFE DE FARMACIA") {
                $("#btnPrint2").attr({ 'disabled': true });
            }
        });

        $("#Nombre").change(function () {
            var nombre = $("#Nombre").val();
            $("#ValPrint").val(nombre);
        });

        function Confirmar1() {
            if (window.confirm("¿Deseá confirmar la solicitud?") == true) {
                var fecha = $("#dateInput").val();
                var CarpetaEncabezadoid = $('select[id=CarpetaEncabezadoid]').val();
                var AreaId = $('select[id=AreaId]').val();
                var ValPrint = $("#ValPrint").val();

                if (fecha == "") {
                    alert("¡Campo de fecha vacio!");
                }
                else if (CarpetaEncabezadoid == null || CarpetaEncabezadoid == 0) {
                    alert("¡Campo de carpeta encabezado vacio!");
                }
                else if (AreaId == null || AreaId == 0) {
                    alert("¡Campo de área vacio!");
                }
                else if (ValPrint == null || ValPrint == "") {
                    alert("¡Campo llave vacio!");
                }
                else {
                    $("#btnPrint").click();
                    return true;
                }
            }
            else {
                alert("¡La acción ha sido cancelada!");
                return false;
            }
        }

        // ******** Modificación 20/09/2023: Validación de invalidar busqueda posterior a la fecha actual ********
        function myFunction() {
            /*alert("Hola");*/
            var myDate = $('#dateInput');
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10)
                dd = '0' + dd;

            if (mm < 10)
                mm = '0' + mm;

            today = yyyy + '-' + mm + '-' + dd;
            myDate.attr("max", today);

            var date = myDate.val();
            if (Date.parse(date)) {
                if (date > today) {
                    /*alert('La fecha no puede ser mayor a la actual');*/
                    swal({
                        title: "¡Error!",
                        text: "¡La fecha no puede ser mayor a la actual!",
                        icon: "error", //built in icons: success, warning, error, info
                        timer: 5000, //timeOut for auto-close
                    });
                    myDate.val("");
                }
            }
        }
    </script>
}

<style>
    table tr th {
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    /*.sorting {
            background-color: #D4D4D4;
        }*/

    .asc:after {
        content: ' ↑';
    }

    .desc:after {
        content: " ↓";
    }
</style>